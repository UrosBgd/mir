<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1487269167785">{:repl-history {:ide [], :local [&quot;(defn to-short-array [byte-arr]\n         (let [short (byte-to-short byte-array)]\n          short))&quot; &quot;(defn to-short-array [byte-arr]\n         (let [short (byte-to-short byte-array)]\n          ))&quot; &quot;(defn to-short-array [byte-arr]\n         (let [short (byte-array (take 2 byte-arr))]\n          ))&quot; &quot;(defn to-short-array [byte-arr]\n         (let [short (byte-array (take 2 byte-arr))]\n          short))&quot; &quot;(defn to-short-array [byte-arr]\n         (let [short (byte-array (take 2 byte-arr))]\n          (short-array short)))&quot; &quot;(to-short-array new-byte-arr)&quot; &quot;(to-short-array (first new-byte-arr))&quot; &quot;(defn to-short-array [byte-arr]\n         (let [short (byte-to-short (byte-array (take 2 byte-arr)))]\n          (short-array short)))&quot; &quot;(byte-to-short (byte-array (take 2 new-byte-arr)))&quot; &quot;(defn to-short-array [byte-arr]\n         (let [short (byte-to-short (byte-array (take 2 byte-arr)))]\n          short))&quot; &quot;(defn to-short-array [byte-arr]\n         (let [short (byte-to-short (byte-array (take 2 byte-arr)))]\n          [short]))&quot; &quot;(print (seq (to-short-array new-byte-arr)))&quot; &quot;(defn to-short-array [byte-arr]\n         (let [short (byte-to-short (byte-array (take 2 byte-arr)))\n               short-arr []]\n          (into short-arr short)))&quot; &quot;(defn to-short-array [byte-arr]\n         (let [short (byte-to-short (byte-array (take 2 byte-arr)))\n               short-arr []]\n          (into short-arr short)\n          short-arr))&quot; &quot;(defn to-short-array [byte-arr]\n         (let [short (byte-to-short (byte-array (take 2 byte-arr)))\n               short-arr (short-array [])]\n          (into short-arr short)\n          short-arr))&quot; &quot;(defn to-short-array [byte-arr]\n         (let [short (byte-to-short (byte-array (take 2 byte-arr)))\n               short-arr (short-array [])]\n          (into short-arr (short-array short))\n          short-arr))&quot; &quot;(defn to-short-array [byte-arr]\n         (let [short (byte-to-short (byte-array (take 2 byte-arr)))\n               short-arr (short-array [])]\n          (cons short-arr (short-array short))\n          short-arr))&quot; &quot;(defn to-short-array [byte-arr]\n         (let [short (byte-to-short (byte-array (take 2 byte-arr)))\n               short-arr (short-array [])]\n          (conj short-arr (short-array short))\n          short-arr))&quot; &quot;(defn to-short-array [byte-arr]\n         (let [short (byte-to-short (byte-array (take 2 byte-arr)))\n               short-arr []]\n          (conj short-arr (short-array short))\n          short-arr))&quot; &quot;(defn to-short-array [byte-arr]\n         (let [short (byte-to-short (byte-array (take 2 byte-arr)))\n               short-arr [3]]\n          (conj short-arr (short-array short))\n          short-arr))&quot; &quot;(defn to-short-array [byte-arr]\n         (let [short (byte-to-short (byte-array (take 2 byte-arr)))\n               short-arr [3]]\n          (conj short-arr short)\n          short-arr))&quot; &quot;(defn to-short-array [byte-arr]\n         (let [short (byte-to-short (byte-array (take 2 byte-arr)))\n               short-arr [3]]\n          (conj short-arr 1)\n          short-arr))&quot; &quot;(conj [1 2 3] 1)&quot; &quot;(conj new-byte-arr 1)&quot; &quot;(conj (byte-array new-byte-arr) 1)&quot; &quot;(conj (seq new-byte-arr) 1)&quot; &quot;(conj (byte-array (seq new-byte-arr)) 1)&quot; &quot;(byte-array (conj (seq new-byte-arr) 1))&quot; &quot;(defn to-short-array [byte-arr]\n         (let [short (byte-to-short (byte-array (take 2 byte-arr)))\n               short-arr [3]]\n          (conj (seq short-arr) short)\n          short-arr))&quot; &quot;short&quot; &quot;(defn to-short-array [byte-arr]\n         (let [short (byte-to-short (byte-array (take 2 byte-arr)))\n               short-arr [3]]\n          (conj (seq short-arr) 1)\n          short))&quot; &quot;(defn to-short-array [byte-arr]\n         (let [short (byte-to-short (byte-array (take 2 byte-arr)))\n               short-arr [3]]\n          (conj (seq short-arr) 1)\n          [short]))&quot; &quot;(first (to-short-array new-byte-arr))&quot; &quot;short-arr&quot; &quot;(defn to-short-array [byte-arr]\n         (let [short (byte-to-short (byte-array (take 2 byte-arr)))\n               short-arr [3]]\n          (conj (seq short-arr) 1)\n          short-arr))&quot; &quot;(defn to-short-array [byte-arr]\n         (let [short (byte-to-short (byte-array (take 2 byte-arr)))\n               short-arr [3]]\n          (conj (seq short-arr) 1)\n          ))&quot; &quot;(defn to-short-array [byte-arr]\n         (let [short (byte-to-short (byte-array (take 2 byte-arr)))\n               short-arr [3]]\n          (conj (seq short-arr) short)\n          ))&quot; &quot;(defn to-short-array [byte-arr]\n         (let [short (byte-to-short (byte-array (take 2 byte-arr)))\n               short-arr [3]]\n          (conj (seq short-arr) short)\n          (to-short-array (subvec byte-arr 2))\n          ))&quot; &quot;(print (to-short-array new-byte-arr))&quot; &quot;(def base-format (. in-audio-stream getFormat))&quot; &quot;(def decoded-format (. AudioFormat (AudioFormat/Encoding PCM_SIGNED)))&quot; &quot;(def decoded-format (. AudioFormat (. AudioFormat/Encoding PCM_SIGNED)))&quot; &quot;(def decoded-format (encoding/PCM_SIGNED))&quot; &quot;(def encoding (. AudioFormat (. AudioFormat/Encoding PCM_SIGNED)))&quot; &quot;(def encoding (. AudioFormat (AudioFormat/Encoding)))&quot; &quot;(def encoding (. AudioFormat \n                 (. AudioFormat/Encoding PCM_SIGNED) \n                 (. base-format getSampleRate) \n                 16 \n                 (. base-format getChannels)\n                 (* 2 (. base-format getChannels))\n                 (. base-format getSampleRate)\n                 false))&quot; &quot;(def decoded-format (. AudioFormat \n                 (. AudioFormat/Encoding PCM_SIGNED) \n                 (. base-format getSampleRate) \n                 16 \n                 (. base-format getChannels)\n                 (* 2 (. base-format getChannels))\n                 (. base-format getSampleRate)\n                 false))&quot; &quot;(ns signal-processing.import\n  (:import (java.io File))\n  ;;(:import (java.io ByteArrayOutputStream))\n  (:import (java.nio ByteBuffer))\n  (:import (javax.sound.sampled AudioInputStream))\n  (:import (javax.sound.sampled AudioSystem))\n  (:import (javax.sound.sampled AudioFormat))\n  (:import (javax.sound.sampled.AudioFormat/Encoding))\n  )&quot; &quot;(def decoded-format (. AudioFormat\n                       (. (. AudioFormat/Encoding) PCM_SIGNED)\n                       (. base-format getSampleRate)\n                       16\n                       (. base-format getChannels)\n                       (* 2 (. base-format getChannels))\n                       (. base-format getSampleRate)\n                       false))&quot; &quot;(def encoding (javax.sound.sampled.AudioFormat/Encoding))&quot; &quot;(def encoding (javax.sound.sampled.AudioFormat.Encoding))&quot; &quot;(def encoding (. javax.sound.sampled.AudioFormat/Encoding))&quot; &quot;(def encoding (. javax.sound.sampled.AudioFormat Encoding))&quot; &quot;(def encoding javax.sound.sampled.AudioFormat/Encoding)&quot; &quot;(def encoding AudioFormat/Encoding)&quot; &quot;(def encoding (. AudioFormat/Encoding))&quot; &quot;(def encoding (AudioFormat/Encoding))&quot; &quot;(def encoding (AudioFormat.Encoding/PCM_SIGNED))&quot; &quot;(map #(eval `(import-static javax.sound.sampled.AudioFormat$Encoding ~(symbol (.getName %))))\n     (filter #(bit-and java.lang.reflect.Modifier/STATIC\n                       (.getModifiers %))\n             (.getFields javax.sound.sampled.AudioFormat$Encoding)))&quot; &quot;(def decoded-audio-stream (. AudioSystem getAudioInputStream decoded-format in-audio-stream))&quot; &quot;(def stream-size (. in-audio-stream available))&quot; &quot;(def stream-size (. decoded-audio-stream available))&quot; &quot;(while\n  (&gt; (. decoded-audio-stream read byte-arr) 0)\n  (. decoded-audio-stream read byte-arr 0 stream-size)\n  )&quot; &quot;(nth byte-arr 100000)&quot; &quot;(nth byte-arr 1000000)&quot; &quot;(nth byte-arr 10000000)&quot; &quot;1000000&quot; &quot;(nth byte-arr 1010000)&quot; &quot;(ns signal-processing.import\n  (:import (java.io File))\n  ;;(:import (java.io ByteArrayOutputStream))\n  (:import (java.nio ByteBuffer))\n  (:import (javax.sound.sampled AudioInputStream AudioSystem AudioFormat AudioFormat$Encoding))\n  )&quot; &quot;(first read-bytes)&quot; &quot;(print read-bytes)&quot; &quot;(read-bytes)&quot; &quot;(first byte-arr)&quot; &quot;(nth byte-arr 10)&quot; &quot;(def data-stream (DataInputStream. (ByteArrayInputStream. byte-arr)))&quot; &quot;(conj float-arr (first (. data-stream readFloat)))&quot; &quot;(conj float-arr (into-array (first (. data-stream readFloat))))&quot; &quot;(conj float-arr (into-array (seq (first (. data-stream readFloat)))))&quot; &quot;(conj float-arr (seq (into-array (first (. data-stream readFloat)))))&quot; &quot;(conj float-arr (into-array (first (. data-stream readFloat)) (second (. data-stream readFloat))))&quot; &quot;(conj float-arr (. data-stream readFloat))&quot; &quot;(conj float-arr (into [] (. data-stream readFloat)))&quot; &quot;(conj float-arr (into [] (seq (. data-stream readFloat))))&quot; &quot;(aset float-arr  1 (. data-stream readFloat))&quot; &quot;(byte-to-float)&quot; &quot;(print stream-size)&quot; &quot;(first float-arr)&quot; &quot;(nth float-arr 10)&quot; &quot;(def dir\&quot;C:\\\\Users\\\\User\\\\Desktop\\\\dataset\\\\genres\\\\rock\&quot;)&quot; &quot;(def files (. (File. dir) listFiles))&quot; &quot;(def path (. (first (. files)) getAbsolutePath))&quot; &quot;(def path (. (first files) getAbsolutePath))&quot; &quot;(def file (File. path))&quot; &quot;(map #(intern *ns* (symbol (.getName %)) (.get % javax.sound.sampled.AudioFormat$Encoding))\n     (filter #(bit-and java.lang.reflect.Modifier/STATIC\n                       (.getModifiers %))\n             (.getFields javax.sound.sampled.AudioFormat$Encoding)))&quot; &quot;(. file length)&quot; &quot;(count float-arr)&quot; &quot;*&quot; &quot;(* (count float-arr) 4)&quot; &quot;(count byte-arr)&quot; &quot;(defn load-encodings []\n  (map #(intern *ns* (symbol (.getName %)) (.get % javax.sound.sampled.AudioFormat$Encoding))\n                         (filter #(bit-and java.lang.reflect.Modifier/STATIC\n                                           (.getModifiers %))\n                                 (.getFields javax.sound.sampled.AudioFormat$Encoding))))&quot; &quot;(load-encodings)&quot;], :remote []}}</component>
</project>