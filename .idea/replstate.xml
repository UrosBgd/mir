<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1487471815676">{:repl-history {:ide [], :local [&quot;(i-part 1.560150202283989E32)&quot; &quot;(println (. (str 1.560150202283989E32) substring 0 2))&quot; &quot;(println (. (str 1.560150202283989E32) substring 0 1))&quot; &quot;(println (int (. (str 1.560150202283989E32) substring 0 1)))&quot; &quot;(println (Integer/parseInt (. (str 1.560150202283989E32) substring 0 1)))&quot; &quot;(defn i-part [num]\n  (Integer/parseInt (. (str num) substring 0 1)))&quot; &quot;(println round 1.560150202283989E32)&quot; &quot;(println round 1.560150202283)&quot; &quot;(println (round 1.560150202283989E32))&quot; &quot;(println (str 1.560150202283989E32))&quot; &quot;(println (. (str 1.560150202283989E32) indexOf \&quot;E\&quot;))&quot; &quot;(println (. (str 1.560150202283989E32) substring (. (str 1.560150202283989E32) indexOf \&quot;E\&quot;) (- (. (str 1.560150202283989E32) length) 1 )))&quot; &quot;(println (. (str 1.560150202283989E32) substring (. (str 1.560150202283989E32) indexOf \&quot;E\&quot;) (- (. (str 1.560150202283989E32) length) 0 )))&quot; &quot;(println (. (str 1.560150202283989E32) substring (+ 1 (. (str 1.560150202283989E32) indexOf \&quot;E\&quot;)) (. (str 1.560150202283989E32) length)))&quot; &quot;(defn number-of-decimals [num]\n  (. (str num) substring\n                (+ 1 (. (str num) indexOf \&quot;E\&quot;))\n                (. (str num) length)))&quot; &quot;(println (Math/round 0.0000000005))&quot; &quot;(println (Math/round (double 0.0000000005)))&quot; &quot;(println (/ (Math/round (* (double 0.0000000005) 10000000)) 10000000))&quot; &quot;(println (/ (Math/round (* (double 0.00005) 10000000)) 10000000))&quot; &quot;(println (/ (Math/round (* (float 0.00005) 10000000)) 10000000))&quot; &quot;(defn round-to-seven [num]\n  (/ (Math/round (* (float 7.00005) 10000000)) 10000000))&quot; &quot;(println (/ (Math/round (* (float 7.00005) 10000000)) 10000000))&quot; &quot;(println (/ (Math/round (* (nth float-arr 10) 10000000)) 10000000))&quot; &quot;(println (/ (Math/round (* (nth float-arr 11) 10000000)) 10000000))&quot; &quot;(println (Integer/parseInt (. (str -0.554225545) substring 0 1)))&quot; &quot;(println (Integer/parseInt (. (str 5.00545454) substring\n                              (- 1 (. (str num) indexOf \&quot;.\&quot;))\n                              (. (str num) indexOf \&quot;.\&quot;))\n         )\n)&quot; &quot;(. (str 5.00545454) substring\n                              (- 1 (. (str 5.00545454) indexOf \&quot;.\&quot;))\n                              (. (str 5.00545454) indexOf \&quot;.\&quot;))&quot; &quot;(println (Integer/parseInt (. (str -5.00545454) substring\n                              (- 1 (. (str -5.00545454) indexOf \&quot;.\&quot;))\n                              (. (str -5.00545454) indexOf \&quot;.\&quot;))\n         )\n)&quot; &quot;(. (str -5.00545454) substring\n                              (- 1 (. (str -5.00545454) indexOf \&quot;.\&quot;))\n                              (. (str -5.00545454) indexOf \&quot;.\&quot;))&quot; &quot;(- 1 (. (str -5.00545454) indexOf \&quot;.\&quot;))&quot; &quot;(. (str -5.00545454) indexOf \&quot;.\&quot;)&quot; &quot;(. (str -5.00545454) substring\n                              (- (. (str -5.00545454) indexOf \&quot;.\&quot;) 1)\n                              (. (str -5.00545454) indexOf \&quot;.\&quot;))&quot; &quot;(println (Integer/parseInt (. (str 5.00545454) substring\n                              (- (. (str 5.00545454) indexOf \&quot;.\&quot;) 1)\n                              (. (str 5.00545454) indexOf \&quot;.\&quot;))\n         )\n)&quot; &quot;(. (str 5.00545454) substring\n                              (- (. (str 5.00545454) indexOf \&quot;.\&quot;) 1)\n                              (. (str 5.00545454) indexOf \&quot;.\&quot;))&quot; &quot;(println (i-part -10.55454))&quot; &quot;(println (Integer/parseInt (. (str 5.00545454) substring\n                              0\n                              (. (str 5.00545454) indexOf \&quot;.\&quot;)))\n)&quot; &quot;(println (Integer/parseInt (. (str 50.00545454) substring\n                              0\n                              (. (str 50.00545454) indexOf \&quot;.\&quot;)))\n)&quot; &quot;(defn test [num] \n  (let [x (Integer/parseInt (. (str num) substring\n                               0\n                               (. (str num) indexOf \&quot;.\&quot;)))]\n    (if (&lt; num 0))\n    (* -1 x))\n)&quot; &quot;(defn test-me [num] \n  (let [x (Integer/parseInt (. (str num) substring\n                               0\n                               (. (str num) indexOf \&quot;.\&quot;)))]\n    (if (&lt; num 0))\n    (* -1 x))\n)&quot; &quot;(defn test-me [num] \n  (let [x (Integer/parseInt (. (str num) substring\n                               0\n                               (. (str num) indexOf \&quot;.\&quot;)))]\n    (if (&lt; num 0)\n      (* -1 x))\n    )\n)&quot; &quot;(defn test-me [num] \n  (let [x (Integer/parseInt (. (str num) substring\n                               0\n                               (. (str num) indexOf \&quot;.\&quot;)))]\n    (if (&lt; num 0)\n      (* -1 x)\n      x)\n    )\n)&quot; &quot;(test-me 5.22355)&quot; &quot;(test-me 156.3322355)&quot; &quot;(defn test-me [num] \n  (let [x (Integer/parseInt (. (str (Math/abs num)) substring\n                               0\n                               (. (Math/abs num) indexOf \&quot;.\&quot;)))]\n    (if (&lt; num 0)\n      (* -1 x)\n      x)\n    )\n)&quot; &quot;(defn test-me [num] \n  (let [x (Integer/parseInt (. (str (Math/abs num)) substring\n                               0\n                               (. (str (Math/abs num)) indexOf \&quot;.\&quot;)))]\n    (if (&lt; num 0)\n      (* -1 x)\n      x)\n    )\n)&quot; &quot;(test-me -156.3322355)&quot; &quot;(test-me -1.3322355)&quot; &quot;(test-me -0.3322355)&quot; &quot;(test-me 0.3322355)&quot; &quot;(test-me 54.3322355)&quot; &quot;(test-me -54.3322355)&quot; &quot;(test-me -4.3322355)&quot; &quot;(println (/ (Math/round (* (nth float-arr 157) 10000000)) 10000000))&quot; &quot;(test-me -4.3322355E24)&quot; &quot;(loop [i 0]\n  (when (&lt; i byte-arr)\n    (let [x (i-part (aget byte-arr i))]\n    (println x)\n    (recur (+ i 1))\n    )\n))&quot; &quot;(defn i-part [num]\n  (let [x (Integer/parseInt (. (str (Math/abs num)) substring\n                               0\n                               (. (str (Math/abs num)) indexOf \&quot;.\&quot;)))]\n    (if (&lt; num 0)\n      (* -1 x)\n      x)\n  )\n)&quot; &quot;(loop [i 0]\n  (when (&lt; i (count byte-arr))\n    (println (i-part (aget byte-arr i)))\n    (recur (+ i 1))\n  )\n)&quot; &quot;(println (i-part 5.2235))&quot; &quot;(i-part 5.2235)&quot; &quot;(loop [i 0]\n  (when (&lt; i 10)\n    (println (i-part 54454.545))\n    (recur (+ i 1))\n  )\n)&quot; &quot;(loop [i 0]\n  (when (&lt; i 10)\n    (println (i-part (aget byte-arr i)))\n    (recur (+ i 1))\n  )\n)&quot; &quot;(loop [i 0]\n  (when (&lt; i 10)\n    (println (aget byte-arr i))\n    (recur (+ i 1))\n  )\n)&quot; &quot;(defn byte-to-float []\n  (loop [i 0]\n    (when (&lt; i (/ stream-size 4))\n      (let [x (. data-stream readFloat)]\n      (aset-float float-arr i x)\n      (println x))\n      (recur (+ i 1))\n    )\n  )\n)&quot; &quot;(defn byte-to-float []\n  (loop [i 0]\n    (when (&lt; i (/ stream-size 4))\n      (let [x (round (. data-stream readFloat))]\n      (aset-float float-arr i x))\n      (recur (+ i 1))\n    )\n  )\n)&quot; &quot;(defn byte-to-float []\n  (loop [i 0]\n    (when (&lt; i (/ stream-size 2))\n      (let [x (round (. data-stream readFloat))]\n      (aset-float float-arr i x))\n      (recur (+ i 1))\n    )\n  )\n)&quot; &quot;(defn byte-to-float []\n  (loop [i 0]\n    (when (&lt; i (/ stream-size 2))\n      (let [x (. data-stream readFloat)]\n      (aset-float float-arr i x))\n      (recur (+ i 1))\n    )\n  )\n)&quot; &quot;(defn byte-to-float []\n  (loop [i 0]\n    (when (&lt; i (/ stream-size 2))\n      (let [x (. data-stream readShort)]\n      (aset-float float-arr i x))\n      (recur (+ i 1))\n    )\n  )\n)&quot; &quot;(count byte-arr)&quot; &quot;(count short-array)&quot; &quot;(println (round 5.2665))&quot; &quot;(println (round 5.0002665))&quot; &quot;(println (round 5.0000002665))&quot; &quot;(println (round 5.00000000002665))&quot; &quot;(println (round 5.00002665))&quot; &quot;(println (round -5.00002665))&quot; &quot;(println (round -51.00002665))&quot; &quot;(println (round -51.02665))&quot; &quot;(loop [i 0]\n     (when (&lt; i (/ stream-size 4))\n       (aset float-arr i (. data-stream readFloat))\n       (recur (+ i 1))\n     )\n  )&quot; &quot;(defn byte-to-float []\n  (loop [i 0]\n     (when (&lt; i (/ stream-size 4))\n       (aset float-arr i (. data-stream readFloat))\n       (recur (+ i 1))\n     )\n  )\n)&quot; &quot;(byte-to-float)&quot; &quot;(nth float-arr 10)&quot; &quot;(nth float-arr 11)&quot; &quot;(loop [i 0]\n  (when (&lt; i (/ stream-size 4))\n    (println (aget float-arr i))\n    (recur (+ i 1))\n    )\n  )&quot; &quot;(loop [i 0]\n  (when (&lt; i (/ stream-size 4))\n    (spit \&quot;float-array.txt\&quot; (aget float-arr i) :append true)\n    (recur (+ i 1))\n    )\n  )&quot; &quot;(loop [i 0]\n  (when (&lt; i (/ stream-size 4))\n    (spit \&quot;float-array.txt\&quot; (str (aget float-arr i) \\n) :append true)\n    (recur (+ i 1))\n    )\n  )\n\n(loop [i 0]\n  (when (&lt; i (/ stream-size 2))\n    (spit \&quot;short-array.txt\&quot; (str (aget short-arr i) \\n) :append true)\n    (recur (+ i 1))\n    )\n  )&quot; &quot;(loop [i 0]\n  (when (&lt; i 4)\n    (spit \&quot;float-array.txt\&quot; (str (aget float-arr i) \&quot;\\n\&quot;) :append true)\n    (recur (+ i 1))\n    )\n  )&quot; &quot;(byte-to-short)&quot; &quot;(aget real 2)&quot; &quot;(aget imag 2)&quot; &quot;(count short-arr)&quot; &quot;(load-encodings)&quot; &quot;(nth short-arr 10)&quot; &quot;(nth short-arr 11)&quot; &quot;(nth short-arr 12)&quot; &quot;(nth short-arr 13)&quot; &quot;(nth short-arr 14)&quot; &quot;(nth short-arr 15)&quot; &quot;(nth short-arr 900)&quot; &quot;(def window (into-array Double/TYPE (make-window audio/short-arr 4096)))&quot; &quot;(fft window)&quot; &quot;(fft)&quot;], :remote []}}</component>
</project>