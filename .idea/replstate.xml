<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1484605893574">{:repl-history {:ide [], :local [&quot;(def arr (into-array Double/TYPE (buffer-read audioStream)))&quot; &quot;(def arr (into-array  Byte/TYPE audioStream))&quot; &quot;def&quot; &quot;(comment def arr (into-array Double/TYPE (buffer-read audioStream)))&quot; &quot;(def stream-read AudioInputStream)&quot; &quot;(def audio-read AudioInputStream)&quot; &quot;(audioStream)&quot; &quot;(print audioStream)&quot; &quot;(def byteArr (let [arr (into-array  Byte/TYPE [])] \n               (. audioStream read arr)))&quot; &quot;(def byteArr (let [arr (into-array  Byte/TYPE [])] \n               (. audioStream read arr)\n               arr))&quot; &quot;(def byteArr (let [arr (into-array  Byte/TYPE [])] \n               (. audioStream read arr)\n               (println arr)))&quot; &quot;(def byteArr (let [arr (into-array  Byte/TYPE [])] \n               (. audioStream read arr)\n               (first arr)))&quot; &quot;(def byteArr (let [arr (into-array  Byte/TYPE [])] \n               (. audioStream read arr)\n               (println (first arr))))&quot; &quot;(def byteArr (let [arr (into-array  Byte/TYPE [])] \n               (. audioStream read arr 0 1024)\n               (println (first arr))))&quot; &quot;(def byteArr (let [arr (into-array  Byte/TYPE [])]\n               (. audioStream read arr 1 1024)\n               (println (first arr))))&quot; &quot;(comment def arr (into-array  Byte/TYPE []))&quot; &quot;(def byteArr (let [arr (into-array  Byte/TYPE [])]\n               (. audioStream read arr)\n               (println (first arr))))&quot; &quot;(def byteArr (let [arrr (into-array  Byte/TYPE [])]\n               (. audioStream read arrr 0 5)\n               (println (first arrr))))&quot; &quot;(def byteArr (let [arrr (into-array  Byte/TYPE [])]\n               (. audioStream read arrr)\n               (println (first arrr))))&quot; &quot;(. audioStream read arr)&quot; &quot;(. audioStream read arr 0 1024)&quot; &quot;(defproject mir \&quot;0.1.0-SNAPSHOT\&quot;\n  :description \&quot;FIXME: write description\&quot;\n  :url \&quot;http://example.com/FIXME\&quot;\n  :license {:name \&quot;Eclipse Public License\&quot;\n            :url \&quot;http://www.eclipse.org/legal/epl-v10.html\&quot;}\n  :dependencies [[org.clojure/clojure \&quot;1.8.0\&quot;]]\n  :main ^:skip-aot mir.core\n  :target-path \&quot;target/%s\&quot;\n  :profiles {:uberjar {:aot :all}})&quot; &quot;(def buffer (new ByteArrayInputStream))&quot; &quot;(def buff (new java.io.ByteArrayInputStream 1500000))&quot; &quot;(def buff (new ByteArrayInputStream 1500000))&quot; &quot;(:require [java.io.ByteArrayInputStream :as buffer])&quot; &quot;(def buff (new buffer 1500000))&quot; &quot;(def buff (new ByteArrayInputStream))&quot; &quot;(def buff (new ByteArrayInputStream 1111111))&quot; &quot;(buff)&quot; &quot;(print buff)&quot; &quot;(. buff reset)&quot; &quot;(def buff new ByteArrayInputStream)&quot; &quot;(mys)&quot; &quot;(def mys (new String \&quot;sa\&quot;))&quot; &quot;(println mys)&quot; &quot;(def mys (new ByteArrayInputStream))&quot; &quot;(def mys (new ByteArrayInputStream Integer.))&quot; &quot;(def mys (new ByteArrayInputStream Integer/getInteger \&quot;1000\&quot;))&quot; &quot;(def mys (new ByteArrayInputStream 1000))&quot; &quot;(def arr (into-array Double/TYPE []))&quot; &quot;(def buff (new java.io.ByteArrayInputStream))&quot; &quot;(def buff ByteArrayInputStream)&quot; &quot;(println buff)&quot; &quot;(def buff ByteArrayInputStream.)&quot; &quot;(def buff java.io.ByteArrayInputStream.)&quot; &quot;(def file (File. \&quot;C:\\\\Users\\\\User\\\\IdeaProjects\\\\mir\\\\resources\&quot;))&quot; &quot;(file/length file)&quot; &quot;(File/length file)&quot; &quot;(def l (. file length))&quot; &quot;(def file (File. \&quot;C:\\\\Users\\\\User\\\\IdeaProjects\\\\mir\\\\resources\\\\rock.00005.au\&quot;))&quot; &quot;(. file length)&quot; &quot;(def arr (into [] file))&quot; &quot;(def audioStream (AudioSystem/getAudioInputStream file))&quot; &quot;(. audioStream getFrameLength)&quot; &quot;(into [] audioStream)&quot; &quot;(def arr [])&quot; &quot;(def byteArr (. audioStream (read arr)))&quot; &quot;(. audioStream read)&quot; &quot;(def byteArr (. audioStream (read arr 0 1024)))&quot; &quot;(def byteArr (. audioStream (. read arr 0 1024)))&quot; &quot;(def byteArr (. audioStream read))&quot; &quot;(def byteArr (. audioStream read (into-array Double/TYPE arr)))&quot; &quot;(def byteArr (. audioStream read (into-array Byte/TYPE)))&quot; &quot;(def byteArr (. audioStream read ([] Byte/TYPE)))&quot; &quot;(byteArr)&quot; &quot;(println byteArr)&quot; &quot;(def byteArr (. audioStream read arr 0 1024))&quot; &quot;(def byteArr (. audioStream read arr 0 10))&quot; &quot;(def byteArr (. audioStream read arr 1 1024))&quot; &quot;(println (second arr))&quot; &quot;(println (first arr))&quot; &quot;(second arr)&quot; &quot;(second byte-array)&quot; &quot;(second (into [] byteArr))&quot; &quot;(first (into [] byteArr))&quot; &quot;(first (into [] arr))&quot; &quot;(def arr (into-array  Byte/TYPE []))&quot; &quot;(def byteArr (. audioStream read arr))&quot; &quot;(first arr)&quot; &quot;(arr)&quot; &quot;(println arr)&quot; &quot;(defproject mir \&quot;0.1.0-SNAPSHOT\&quot;\n  :description \&quot;FIXME: write description\&quot;\n  :url \&quot;http://example.com/FIXME\&quot;\n  :license {:name \&quot;Eclipse Public License\&quot;\n            :url \&quot;http://www.eclipse.org/legal/epl-v10.html\&quot;}\n  :dependencies [[org.clojure/clojure \&quot;1.8.0\&quot;]\n                 [overtone \&quot;0.10.1\&quot;]]\n  :main ^:skip-aot mir.core\n  :target-path \&quot;target/%s\&quot;\n  :profiles {:uberjar {:aot :all}})&quot;], :remote []}}</component>
</project>